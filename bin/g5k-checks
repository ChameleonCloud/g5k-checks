#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'optparse/time'

require 'g5kchecks'
require 'g5kchecks/utils/configparser'

require 'syslog'

# Options parsing

$hashconf = {}

USAGE = "Usage: #{$0} [options]"

optparse = OptionParser.new(USAGE) do |opts|

  opts.banner << " argv..."

  # separator
  opts.on_tail
  opts.on_tail("common options:")

  # no argument, shows at tail
  opts.on_tail("--help", "show this message") {puts opts; exit}

  $hashconf["conffile"] = "/etc/g5k-checks.conf"
  opts.on( '-c', '--config-file <PATH>', "Specify the path to the g5kchecks (new) configuration files [default: '#{$hashconf["conffile"]}']") do |conf|
    $hashconf["conffile"] = conf
  end
  
  $hashconf["output_dir"] = "/var/lib/g5kchecks/"
  opts.on( '-o', '--output-dir <PATH>', "Specify the path to the g5kchecks put output files [default: #{$hashconf["output_dir"]}]") do |outputdir|
    $hashconf["output_dir"] = outputdir
  end

  $hashconf["mode"] = "oar_checks"
  opts.on( '-m', '--mode MODE', "Specify the functional mode (oar_checks, api, jenkins) [default: 'oar_checks']") do |mode|
    $hashconf["mode"] = mode
  end

  # array
  opts.on("-e", "--enable-tests[=TEST1,TEST2]", Array, "Enable specifics tests") {|testlist|$hashconf["enabletestlist"]=testlist}

  # array
  opts.on("-r", "--remove-tests[=TEST1,TEST2] (default=all)", Array, "Remove specifics tests") do |rm|
    $hashconf["removetestlist"] = rm
  end

  opts.on( '-u', '--url-api <URL>', "Specify the URL API where g5kchecks retrieve informations") do |u|
    $hashconf["urlapi"] = u
  end

  $hashconf["verbose"] = false
  opts.on_tail( '-v', '--verbose', "Enable verbose mode [default: #{$hashconf["verbose"]}]") do 
    $hashconf["verbose"] = true
  end

  opts.on_head("specific options:")

  # version
#  opts.on_tail('', "--version", "show version") do
#    require 'version'
#    puts VERSION
#    exit
#  end

end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts e.to_s
  exit 1
end

$hashconf = G5kChecks::ConfigParser.new($hashconf["conffile"]).parse.merge!($hashconf)

G5kChecks::G5kChecks.new.run($hashconf)

#Send fails to Syslog
Syslog.open("g5k-checks", Syslog::LOG_ODELAY, Syslog::LOG_DAEMON)
Dir.foreach($hashconf["output_dir"]) {|f|
  next if f=='.' or f=='..'
  Syslog.log(Syslog::LOG_INFO, File.read($hashconf["output_dir"]+"/"+f))
}
Syslog.close
