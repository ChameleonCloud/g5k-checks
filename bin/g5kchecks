#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'optparse/time'

require 'g5kchecks'
require 'g5kchecks/utils/configparser'

CONFIG_PATH = '/etc/g5kchecks.conf'
OUTPUT_PATH = '/var/lib/g5kchecks'

# Options parsing

$configpath   = CONFIG_PATH
$outputpath   = OUTPUT_PATH
$hashconf = {}

USAGE = "Usage: #{$0} [options]"

optparse = OptionParser.new(USAGE) do |opts|

  opts.banner << " argv..."

  # separator
  opts.on_tail
  opts.on_tail("common options:")

  # no argument, shows at tail
  opts.on_tail("--help", "show this message") {puts opts; exit}

  opts.on( '-c', '--config-file <PATH>', "Specify the path to the g5kchecks (new) configuration files [default: '#{CONFIG_PATH}']") do |k|
    $configpath = k
  end

  opts.on( '-o', '--output-file <PATH>', "Specify the path to the g5kchecks put output files [default: '#{OUTPUT_PATH}']") do |k|
    $hashconf[:checks_for_init_dir] = k
  end

  # boolean switch(default true)
  $hashconf[:api] = false
  opts.on("-p", "--populate-api", TrueClass, "generate yaml to populate the api") {|api|$hashconf[:api]=api}

  # array
  $hashconf[:testlist]=nil
  opts.on("-t", "--test-list[=TEST1,TEST2]", Array, "list") {|testlist|$hashconf[:testlist]=testlist}

  opts.on_head("specific options:")

  # version
  opts.on_tail("--version", "show version") do
    require 'version'
    puts G5kChecks::VERSION
    exit
  end

end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts e.to_s
  exit 1
end

$hashconf = G5kChecks::ConfigParser.new($configpath).parse.merge!($hashconf)

G5kChecks::G5kChecks.new.run($hashconf)
